@page "/RivenTable"
@using WarframeUtil.Data
@using System.Net
@using BlazorDownloadFile
@using BlazorTable
@using ServiceStack
@using SimpleJSON
@inject Data.GVState GVState;

<PageTitle>RivenTable</PageTitle>
<h2>RivenTable</h2>

@*<BlazorTable.Table TableItem="Riven" Items="weapons" PageSize="50" style='@(GVState.IsDarkMode.Equals(true) ? "color: #dae0e5" : "")'>
    <BlazorTable.LoadingDataTemplate>
        Loading...
    </BlazorTable.LoadingDataTemplate>
    <BlazorTable.Column TableItem="Riven" Title="Weapon Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="Trade Chat (5 days)" Field="@(x => x.Count)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="UnrolledAvg" Field="@(x => x.AverageUnrolled)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="PriceAvg" Field="@(x => x.PriceAvg)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="PriceMin" Field="@(x => x.PriceMin)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="PriceMax" Field="@(x => x.PriceMax)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="UnfilteredPriceAvg" Field="@(x => x.UnfilteredPriceAvg)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="UnfilteredPriceMin" Field="@(x => x.UnfilteredPriceMin)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.Column TableItem="Riven" Title="UnfilteredPriceMax" Field="@(x => x.UnfilteredPriceMax)" Sortable="true" Filterable="true" Width="10%"/>
    <BlazorTable.DetailTemplate TableItem="Riven" Context="weapons">
        <div style="color:green">
            Top 5 Buffs(by popularity): <br/>
            @(weapons.RivenStats.Buffs[0].Name)<br/>
            @(weapons.RivenStats.Buffs[1].Name)<br/>
            @(weapons.RivenStats.Buffs[2].Name)<br/>
            @(weapons.RivenStats.Buffs[3].Name)<br/>
            @(weapons.RivenStats.Buffs[4].Name)<br/>
        </div>
        <div style="color:#990000">
            Top 5 Curses(by popularity): <br/>
            @(weapons.RivenStats.Curses[0].Name)<br/>
            @(weapons.RivenStats.Curses[1].Name)<br/>
            @(weapons.RivenStats.Curses[2].Name)<br/>
            @(weapons.RivenStats.Curses[3].Name)<br/>
            @(weapons.RivenStats.Curses[4].Name)<br/>
        </div>
    </BlazorTable.DetailTemplate>
    <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true"/>
</BlazorTable.Table>*@


@*<MudButton  Variant="MudBlazor.Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white; width: 200px; height: 60px;" @onclick=@(async () => await BlazorDownloadFileService.DownloadFileFromText("Export.csv", csv.Replace(',', ';'), System.Text.Encoding.UTF8, "text/csv"))>
    Dowload as csv
</MudButton>*@

<RadzenButton Text="Export XLS" Icon="grid_on" Click="@(async () => await BlazorDownloadFileService.DownloadFileFromText("Export.csv", csv.Replace(',', ';'), System.Text.Encoding.UTF8, "text/csv"))" Class="mb-4 mr-2" />
<RadzenDataGrid @ref="grid" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@weapons" TItem="Riven" PageSize="18">
    <Template Context="order">
        <RadzenCard Style="margin-bottom:20px">
            <div style="color:green">
                Top 5 Buffs(by popularity): <br/>
                @(order.RivenStats.Buffs[0].Name)<br/>
                @(order.RivenStats.Buffs[1].Name)<br/>
                @(order.RivenStats.Buffs[2].Name)<br/>
                @(order.RivenStats.Buffs[3].Name)<br/>
                @(order.RivenStats.Buffs[4].Name)<br/>
            </div>
        </RadzenCard>
        <RadzenCard Style="margin-bottom:20px">
            <div style="color:#990000">
                Top 5 Curses(by popularity): <br/>
                @(order.RivenStats.Curses[0].Name)<br/>
                @(order.RivenStats.Curses[1].Name)<br/>
                @(order.RivenStats.Curses[2].Name)<br/>
                @(order.RivenStats.Curses[3].Name)<br/>
                @(order.RivenStats.Curses[4].Name)<br/>
            </div>
        </RadzenCard>
    </Template>
    
    <Columns>
        <RadzenDataGridColumn TItem="Riven" Property="Name" Title="Weapon Name" />
        <RadzenDataGridColumn TItem="Riven" Property="Count" Title="Trade Chat (5 days)" />
        <RadzenDataGridColumn TItem="Riven" Property="AverageUnrolled" Title="UnrolledAvg" />
        <RadzenDataGridColumn TItem="Riven" Property="PriceAvg" Title="PriceAvg" />
        <RadzenDataGridColumn TItem="Riven" Property="PriceMin" Title="PriceMin" />
        <RadzenDataGridColumn TItem="Riven" Property="PriceMax" Title="PriceMax" />
        <RadzenDataGridColumn TItem="Riven" Property="UnfilteredPriceAvg" Title="UnfilteredPriceAvg" />
        <RadzenDataGridColumn TItem="Riven" Property="UnfilteredPriceMin" Title="UnfilteredPriceMin" />
        <RadzenDataGridColumn TItem="Riven" Property="UnfilteredPriceMax" Title="UnfilteredPriceMax" />
    </Columns>
</RadzenDataGrid>

@code{
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    RadzenDataGrid<Riven> grid;

    private bool enabled = true;

    public string url = "https://10o.io/pricehistory.json?v2";
    public List<Riven> weapons { get; set; }

    public string csv { get; set; }

    protected override async Task OnInitializedAsync()
    {
        weapons = new List<Riven>();
        FilterJson(GetData());
    }

    public void FilterJson(string jsonContent)
    {
        JSONNode json = JSONNode.Parse(jsonContent);

        foreach (JSONNode weapon in json)
        {
            List<int> prices = new List<int>();
            List<int> unrolledPrices = new List<int>();
            Dictionary<string, int> buffDict = new Dictionary<string, int>();
            Dictionary<string, int> curseDict = new Dictionary<string, int>();
            foreach(JSONNode data in weapon)
            {
                foreach(JSONNode riven in data)
                {
                    if (riven["rolls"] == 0)
                    {
                        unrolledPrices.Add(int.Parse(riven["price"])); 
                    }
                    prices.Add(int.Parse(riven["price"]));

                    foreach (JSONNode buff in riven["buffs"])
                    {//keep track of buffs/curses per weapon
                        String name = buff["tag"].ToString().Remove(0, 8).Trim('\"');
                        if (buff["curse"])
                        {
                            if (curseDict.ContainsKey(name))
                            {
                                curseDict[name]++;
                            }
                            else
                            {
                                curseDict.Add(name, 1);
                            }
                        }
                        else
                        {
                            if (buffDict.ContainsKey(name))
                            {
                                buffDict[name]++;
                            }
                            else
                            {
                                buffDict.Add(name, 1);
                            }
                        }
                    }
                }
            }
            
            RivenStats rivenStats = new RivenStats();
            //sort lists by count
            foreach (KeyValuePair<string, int> item in buffDict.OrderByDescending(key => key.Value))
            {
                rivenStats.Buffs.Add(new Buff(item.Key, item.Value));
            }
            foreach (KeyValuePair<string, int> item in curseDict.OrderByDescending(key => key.Value))
            {
                rivenStats.Curses.Add(new Curse(item.Key, item.Value));
            }
            
            
            if (rivenStats.Buffs.Count < 5)//fill list past 5 to avoid nullpointer
            {
                for (int sub5 = rivenStats.Buffs.Count; sub5 < 6; sub5++)
                {
                    rivenStats.Buffs.Add(new Buff(" ", 0));
                }
            }
            if (rivenStats.Curses.Count < 5)
            {
                for (int sub5 = rivenStats.Curses.Count; sub5 < 6; sub5++)
                {
                    rivenStats.Curses.Add(new Curse("", 0));
                }
            }
            
            List<int> filteredUnrolledPrices = new List<int>();
            foreach (int item in unrolledPrices)//filter unreasonably high prices on unrolled rivens
            {
                if (item < (int) Math.Round(unrolledPrices.Average() * 0.75))
                {
                    filteredUnrolledPrices.Add(item);
                }
            }
            if (filteredUnrolledPrices.Count == 0)
            {
                filteredUnrolledPrices.Add(1);
            }
            
            List<int> filteredTotalPrices = new List<int>();
            foreach (int item in prices)//filter unreasonably high prices on all rivens
            {
                if (item < (int) Math.Round(prices.Average() * 0.87))
                {
                    filteredTotalPrices.Add(item);
                }
            }
            if (filteredTotalPrices.Count == 0)
            {
                filteredTotalPrices.Add(1);
            }
            
            
            Riven currentWeapon = new Riven()
            {
                Name = weapon["name"].ToString().Trim('\"'),
                Count = (int) weapon["data"].Count,
                PriceMin = (int) filteredTotalPrices.Min(),
                PriceMax = (int) filteredTotalPrices.Max(),
                PriceAvg = (double) Math.Round(filteredTotalPrices.Average()),
                UnfilteredPriceMin = (int) prices.Min(),
                UnfilteredPriceMax = (int) prices.Max(),
                UnfilteredPriceAvg = (double) Math.Round(prices.Average()),
                RivenStats = rivenStats,
                AverageUnrolled = Math.Round(filteredUnrolledPrices.Average())
            };
            weapons.Add(currentWeapon);
        }
        csv = weapons.ToCsv();
    }
    
    public string GetData()
    {
        return new WebClient().DownloadString("https://10o.io/pricehistory.json?v2");
    }
    
    protected override void OnInitialized()
    {
        GVState.OnChange += StateHasChanged;

    }
    public void Dispose()
    {
        GVState.OnChange -= StateHasChanged;
    }

}