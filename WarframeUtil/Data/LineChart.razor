@using System.Globalization
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _db;

<RadzenChart @ref="RadzenChart">
    <RadzenLineSeries Data="@Avg" CategoryProperty="ItemDate" Title="PriceAvg" ValueProperty="PriceAvg">
        <RadzenMarkers MarkerType="MarkerType.Circle" />
    </RadzenLineSeries>
    <RadzenLineSeries Data="@Avg" CategoryProperty="ItemDate" Title="UnrolledAvg" ValueProperty="UnrolledAvg">
        <RadzenMarkers MarkerType="MarkerType.Circle" />
    </RadzenLineSeries>
    <RadzenCategoryAxis Padding="20" FormatString="{0:M}" />
    <RadzenValueAxis Formatter="@FormatAsP">
        <RadzenGridLines Visible="true" />
        <RadzenAxisTitle Text="" />
    </RadzenValueAxis>
</RadzenChart>

@code {
    [Parameter]
    public Riven CurrentRiven { get; set; }
    public RadzenChart RadzenChart { get; set; }
    public List<RivenDBClass> Current { get; set; }
    DataItem[] Avg { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var dbData = _db.Rivens
            .Include(d => d.DDate)
            .Include(d => d.PriceAvg)
            .Include(d => d.UnrolledAvg)
            .AsSplitQuery()
            .ToList();

        Current = dbData.Where(d => d.Name == CurrentRiven.Name).ToList();
        var dates = Current.Last().DDate.ToList();
        var priceAvgs = Current.Last().PriceAvg.ToList();
        var unrolledAvgs = Current.Last().UnrolledAvg.ToList();

        List<DataItem> AvgTemp = new List<DataItem>();

        for (int i = 0; i < dates.Count; i++)
        {
            AvgTemp.Add(new DataItem()
            {
                ItemDate = dates[i].DDate,
                PriceAvg = priceAvgs[i].price,
                UnrolledAvg = unrolledAvgs[i].price
            });
        }
        Avg = AvgTemp.ToArray();
    }
    
    class DataItem
    {
        public DateTime ItemDate { get; set; }
        public int PriceAvg { get; set; }
        public int UnrolledAvg { get; set; }
    }

    string FormatAsP(object value)
    {
        return ((double)value).ToString()+ "p";
    }
}