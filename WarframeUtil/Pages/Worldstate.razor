@page "/Worldstate"
@using WarframeUtil.Data
@using Newtonsoft.Json
@using System.Net
@implements IDisposable
@using System.Timers

<PageTitle>Worldstate</PageTitle>
<h3>Worldstate</h3>

<MudContainer Class="mt-6 px-4" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <h4 class="text-center">Challenges</h4>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <h4 class="text-center">Void Fissures</h4>
                
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <h4 class="text-center">Sorties</h4>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <h4 class="text-center">Relays</h4>
            </MudPaper>
        </MudItem>
        <MudSpacer/>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <h4 class="text-center">Bounties</h4>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>




@code {
    Root? WorldstateRoot { get; set; }
    private Timer? _timer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer();
            _timer.Interval = 30000;
            _timer.Elapsed += OnTimerInterval;
            _timer.AutoReset = true;
    // Start the timer
            _timer.Enabled = true;
        }
        base.OnAfterRender(firstRender);
    }
    
    private void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        IncrementCount();
        InvokeAsync(() => StateHasChanged());
    }
    
    public void Dispose()
    {
    // During prerender, this component is rendered without calling OnAfterRender and then immediately disposed
    // this mean timer will be null so we have to check for null or use the Null-conditional operator ? 
        _timer?.Dispose();
    }
    
    
    
    
    protected override void OnInitialized()
    {
        WorldstateRoot = GetWorldstate();
    }
    
    private Root? GetWorldstate()
    {
        HttpClient client = new HttpClient();
        using (HttpResponseMessage response = client.GetAsync("https://content.warframe.com/dynamic/worldState.php").Result)
        {
            using (HttpContent content = response.Content)
            {
                var json = content.ReadAsStringAsync().Result;
                return JsonConvert.DeserializeObject<Root>(json);
            } 
        }
    }
    
    private void IncrementCount()
    {
        WorldstateRoot = GetWorldstate();
    }
}