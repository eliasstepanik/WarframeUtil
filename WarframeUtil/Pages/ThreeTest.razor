@page "/ThreeTest"
@using System.Timers
@inject IJSRuntime JSRuntime;


@code {

    private static System.Timers.Timer aTimer;
    private string status = "healthy";

    protected async override void OnAfterRender(bool firstRender)
    {
        // pass reference for JSInvokables
        await JSRuntime.InvokeAsync<object>("createScene", new object[] { DotNetObjectReference.Create(this) });
        await JSRuntime.InvokeAsync<object>("createCube", new object[] { });
        await JSRuntime.InvokeAsync<object>("animate", new object[] { });

        // from time to time change color of cube...
        // Create a timer with a two second interval.
        aTimer = new System.Timers.Timer(2000);
        // Hook up the Elapsed event for the timer. 
        aTimer.Elapsed += OnTimedEvent;
        aTimer.AutoReset = true;
        aTimer.Enabled = true;

    }

    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        switch (status)
        {
            case "healthy":
                await JSRuntime.InvokeAsync<object>("unhealthy", new object[] { });
                status = "unhealthy";
                break;
            case "unhealthy":
                await JSRuntime.InvokeAsync<object>("healthy", new object[] { });
                status = "healthy";
                break;
        }


    }

    [JSInvokable]
    public async void OnClickCube()
    {
        await JSRuntime.InvokeAsync<object>("clickCube", new object[] { });
    }
}